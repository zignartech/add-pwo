module main
author unknown
version 1 0 
description ''
variables responses 

	spec ' ' 'initializeResponses' 'initializeResponses'

to initializeResponses {
  responses = ('[data:makeList]' ('[data:makeList]' '/' '<h1>Hello!</h1>
<p>This is the MicroBlocks HTTP server.</p>
<p>You can test the following URLs:</p>
<ul>
<li>/test</li>
<li>/foo</li>
<li>/bar</li>
</ul>') ('[data:makeList]' '/test' '<p>This is a <strong>test</strong> URL</p>') ('[data:makeList]' '/foo' '<p>Just a page that says</p>
<h1>FOO</h1>') ('[data:makeList]' '/bar' '<p>Just a page that says</p>
<h1>BAR</h1>
<img src="http://microblocks.fun/logo.png"/>'))
}

script 50 40 {
comment 'This is an example HTTP server written in MicroBlocks.
It responds to the following URLs:

/servo/on
/servo/off

/waterPump/on
/waterPump/off
'
}

script 716 234 {
comment 'My IP Address
'
sayIt (getIPAddress)
}

script 56 272 {
whenStarted
comment 'Remember to use your network name (SSID) and password below'
'wifi connect to' 'ZIGNAR' 'ckj0mchx' 3
local 'request' ''
forever {
  request = ('[net:httpServerGetRequest]')
  sayIt ('path of request' request)
  if (request != '') {
    if (('path of request' request) == '/servo/on') {
      setServoAngle 5 90
      '[net:respondToHttpRequest]' '200 OK' ('[data:join]' '{"state":' 'true' '}')
      stopServo 5
    } (('path of request' request) == '/servo/off') {
      setServoAngle 5 -90
      '[net:respondToHttpRequest]' '200 OK' ('[data:join]' '{"state":' 'false' '}')
      stopServo 5
    } (('path of request' request) == '/waterPump/on') {
      digitalWriteOp 4 true
      '[net:respondToHttpRequest]' '200 OK' ('[data:join]' '{"state":' 'true' '}')
    } (('path of request' request) == '/waterPump/off') {
      digitalWriteOp 4 false
      '[net:respondToHttpRequest]' '200 OK' ('[data:join]' '{"state":' 'false' '}')
    } else {
      stopServo 5
      '[net:respondToHttpRequest]' '404 Not Found' '<h1>404 Not Found</h1><p>I''m sorry, this page does not exist :(</p>'
    }
    '[net:respondToHttpRequest]' '404 Not Found' '<h1>404 Not Found</h1><p>I''m sorry, this page does not exist :(</p>'
    stopServo 5
  }
  waitMillis 10
}
}


module 'HTTP server' Comm
author MicroBlocks
version 1 3 
depends WiFi 
tags http network 
description 'Create an HTTP server in MicroBlocks. You can use this library to allow remote control for your Wifi-enabled board.'

	spec 'r' '[net:httpServerGetRequest]' 'HTTP server request : binary data _' 'bool' false
	spec 'r' 'request method' 'method of request _' 'str' ''
	spec 'r' 'path of request' 'path of request _' 'str' ''
	spec 'r' 'headers of request' 'headers of request _' 'str' ''
	spec 'r' 'body of request' 'body of request _' 'str' ''
	spec 'r' 'content length of request' 'content length of request _' 'str' ''
	spec ' ' '[net:respondToHttpRequest]' 'respond _ to HTTP request : with body _ : and headers _ : keepAlive _' 'str str str bool' '200 OK' 'Welcome to the MicroBlocks HTTP server' 'Content-Type: text/plain' false
	spec 'r' '_endOfHeaders' '_end of headers _' 'str'
	spec 'r' '_toString' '_toString _' 'auto' 'abc'

to '_endOfHeaders' request {
  return ('[data:find]' ('[data:unicodeString]' ('[data:makeList]' 13 10 13 10)) request)
}

to '_toString' aStringOrByteArray {
  comment 'If argument is a byte array, convert it to a string. '
  if (not (isType aStringOrByteArray 'string')) {
    aStringOrByteArray = ('[data:join]' '' aStringOrByteArray)
  }
  return aStringOrByteArray
}

to 'body of request' request {
  i = ('_endOfHeaders' request)
  if (i < 0) {
    return ''
  }
  return ('[data:copyFromTo]' request (i + 4))
}

to 'content length of request' request {
  local 'i' ('_endOfHeaders' request)
  if (i < 0) {
    return 0
  }
  local 'j' ('[data:find]' 'Content-Length: ' request)
  if (j < 0) {
    comment 'Try alternate capitalization'
    j = ('[data:find]' 'Content-length: ' request)
  }
  if (or (j < 0) (j > i)) {
    return 0
  }
  j += 16
  local 'k' ('[data:find]' ('[data:unicodeString]' 13) request j)
  return (('[data:copyFromTo]' request j (k - 1)) + 0)
}

to 'headers of request' request {
  i = ('_endOfHeaders' request)
  if (i < 0) {
    return ''
  }
  return ('_toString' ('[data:copyFromTo]' request 1 (i - 1)))
}

to 'path of request' request {
  return ('_toString' ('[data:copyFromTo]' request (('[data:find]' ' ' request) + 1) (('[data:find]' ' HTTP' request) - 1)))
}

to 'request method' request {
  return ('_toString' ('[data:copyFromTo]' request 1 (('[data:find]' ' ' request) - 1)))
}


module Servo Output
author MicroBlocks
version 1 0 
tags servo motor angle rotation position 
description 'Control both positional (angle) and rotational servo motors.'
variables _servoPin _servoPulseWidth 

	spec ' ' 'setServoAngle' 'set servo _ to _ degrees (-90 to 90)' 'num num' 1 90
	spec ' ' 'setServoSpeed' 'set servo _ to speed _ (-100 to 100)' 'num num' 1 100
	spec ' ' 'stopServo' 'stop servo _' 'num' 1
	spec 'r' '_servoIndex' '_servoIndex _' 'num' 1
	spec ' ' '_servoPulse' '_servoPulse pin _ usecs _' 'num num' 1 1500
	spec ' ' '_servoUpdateLoop' '_servoUpdateLoop'

to '_servoIndex' which {
  if (_servoPin == 0) {
    _servoPin = ('[data:makeList]')
    _servoPulseWidth = ('[data:makeList]')
    sendBroadcast '_servoUpdateLoop'
  }
  local 'i' ('[data:find]' which _servoPin)
  if (i < 0) {
    comment 'Add new pin'
    '[data:addLast]' which _servoPin
    '[data:addLast]' '1500' _servoPulseWidth
    i = (size _servoPin)
  }
  return i
}

to '_servoPulse' pin usecs {
  if (usecs == 0) {
    comment 'Servo stopped; do nothing'
    return 0
  }
  usecs = (maximum 850 (minimum usecs 2150))
  comment 'Split wait into a long wait followed by a wait of <= 30 usecs for greater accuracy'
  local 'endTime' ((microsOp) + usecs)
  digitalWriteOp pin true
  waitMicros (usecs - 30)
  waitMicros (endTime - (microsOp))
  digitalWriteOp pin false
}

to '_servoUpdateLoop' {
  forever {
    if (_servoPin != 0) {
      comment 'If the _servoPin list is not 0, update the servos'
      for i (size _servoPin) {
        local 'pin' (at i _servoPin)
        local 'usecs' (at i _servoPulseWidth)
        if (and (pin >= 0) (usecs != 0)) {
          '_servoPulse' pin usecs
        }
      }
      waitMillis 15
    }
  }
}

to setServoAngle which degrees optionalReverse {
  local 'reversed' false
  if ((pushArgCount) > 2) {
    reversed = optionalReverse
  }
  if reversed {
    degrees = (0 - degrees)
  }
  local 'pulseWidth' (1500 - (10 * degrees))
  if ('[io:hasServo]') {
    '[io:setServo]' which pulseWidth
  } else {
    atPut ('_servoIndex' which) _servoPulseWidth pulseWidth
  }
}

to setServoSpeed which speed optionalReverse {
  local 'reversed' false
  if ((pushArgCount) > 2) {
    reversed = optionalReverse
  }
  if reversed {
    speed = (0 - speed)
  }
  local 'pulseWidth' (1500 - (10 * speed))
  if ((absoluteValue speed) < 2) {
    pulseWidth = 0
  }
  if ('[io:hasServo]') {
    '[io:setServo]' which pulseWidth
  } else {
    atPut ('_servoIndex' which) _servoPulseWidth pulseWidth
  }
}

to stopServo which {
  if ('[io:hasServo]') {
    '[io:setServo]' which 0
  } else {
    atPut ('_servoIndex' which) _servoPulseWidth 0
  }
}


module WiFi Comm
author MicroBlocks
version 1 3 
tags communication network 
description 'Connect to a WiFi network. To be used in conjunction with other network libraries, such as HTTP client, HTTP server or Web Thing.
'

	spec ' ' 'wifi connect to' 'wifi connect to _ password _ try _ times' 'str str num' 'Network_Name' '' 3
	spec ' ' 'wifiCreateHotspot' 'wifi create hotspot _ password _' 'str str' 'Network_Name' 'Network_Password'
	spec 'r' 'getIPAddress' 'IP address'

to getIPAddress {
  return ('[net:myIPAddress]')
}

to 'wifi connect to' ssid password tries {
  if (not ('[net:hasWiFi]')) {return}
  repeatUntil (or ('Connected' == ('[net:wifiStatus]')) (tries < 1)) {
    '[net:startWiFi]' ssid password
    repeatUntil ('Trying...' != ('[net:wifiStatus]')) {
      comment 'Slow blink while connecting'
      setUserLED true
      waitMillis 500
      setUserLED false
      waitMillis 500
    }
    tries += -1
  }
  repeat 8 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  waitMillis 1000
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}

to wifiCreateHotspot ssid password {
  if (not ('[net:hasWiFi]')) {return}
  '[net:startWiFi]' ssid password true
  repeatUntil ('Connected' == ('[net:wifiStatus]')) {
    comment 'Slow blink while connecting'
    setUserLED true
    waitMillis 500
    setUserLED false
    waitMillis 500
  }
  repeat 8 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  waitMillis 1000
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}

